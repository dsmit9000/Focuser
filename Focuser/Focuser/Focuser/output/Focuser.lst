FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C24xxxB microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   18h                      ;VC3 Interrupt Vector
                                        (0133)     // call	void_handler
0018: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0137)     // call	void_handler
001C: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0141)     // call	void_handler
0020: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0145)     // call	void_handler
0024: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0149)     // call	void_handler
0028: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0153)     // call	void_handler
002C: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0157)     // call	void_handler
0060: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0161)     // call	void_handler
0064: 7E       RETI                     (0162)     reti
0068: 71 10    OR    F,0x10             
                                        (0163)     ;---------------------------------------------------
                                        (0164)     ; Insert your custom code above this banner
                                        (0165)     ;---------------------------------------------------
                                        (0166)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0167) 
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;  Start of Execution.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0172) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0173) ;
                                        (0174) 
                                        (0175) IF	(TOOLCHAIN & HITECH)
                                        (0176)  	AREA PD_startup(CODE, REL, CON)
                                        (0177) ELSE
                                        (0178)     org 68h
                                        (0179) ENDIF
                                        (0180) __Start:
                                        (0181) 
                                        (0182)     ; initialize SMP values for voltage stabilization, if required,
                                        (0183)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0184)     ; least for now. 
                                        (0185)     ;
                                        (0186)     M8C_SetBank1
006A: 62 E3 83 MOV   REG[0xE3],0x83     (0187)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0188)     M8C_SetBank0
                                        (0189) 
                                        (0190) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0191) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0192)     M8C_EnableWatchDog
                                        (0193) ENDIF
                                        (0194) 
                                        (0195) IF ( SELECT_32K )
                                        (0196)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0197) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0198)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0199) ENDIF
                                        (0200) 
                                        (0201) IF	(TOOLCHAIN & HITECH)
                                        (0202) 	global		__Lstackps
                                        (0203) 	mov     a,low __Lstackps
                                        (0204) 	swap    a,sp
                                        (0205) ELSE
                                        (0206)     ;------------------
                                        (0207)     ; Set up the stack
                                        (0208)     ;------------------
0075: 50 1B    MOV   A,0x1B             (0209)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0210)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0211) ENDIF
                                        (0212) 
                                        (0213)     ;-----------------------------------------------
                                        (0214)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0215)     ;-----------------------------------------------
                                        (0216) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0217) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0218)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0219)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0220)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0221)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0222)   IF ( AGND_BYPASS )
                                        (0223)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0224)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0225)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0226)     ; value using the proper trim values.
                                        (0227)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0228)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0229)   ENDIF
                                        (0230)  ENDIF
                                        (0231) ENDIF ; 5.0 V Operation
                                        (0232) 
                                        (0233) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0234)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
007B: 43 FE 10 OR    REG[0xFE],0x10     (0235)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
007E: 55 FA 02 MOV   [_ramareas_end+223],0x2
0081: 4F       MOV   X,SP               
0082: 5B       MOV   A,X                
0083: 01 03    ADD   A,0x3              
0085: 53 F9    MOV   [_ramareas_end+222],A
0087: 55 F8 3A MOV   [_ramareas_end+221],0x3A
008A: 50 06    MOV   A,0x6              
008C: 00       SWI                      
008D: 71 10    OR    F,0x10             
008F: 51 FC    MOV   A,[_ramareas_end+225]
0091: 60 E8    MOV   REG[0xE8],A        
0093: 55 FA 01 MOV   [_ramareas_end+223],0x1
0096: 4F       MOV   X,SP               
0097: 5B       MOV   A,X                
0098: 01 03    ADD   A,0x3              
009A: 53 F9    MOV   [_ramareas_end+222],A
009C: 55 F8 3A MOV   [_ramareas_end+221],0x3A
009F: 50 06    MOV   A,0x6              
00A1: 00       SWI                      
00A2: 51 F8    MOV   A,[_ramareas_end+221]
00A4: 60 EA    MOV   REG[0xEA],A        
00A6: 70 EF    AND   F,0xEF             
                                        (0236)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0237)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0238)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0239)  ENDIF
                                        (0240) ENDIF ; 3.3 Volt Operation
                                        (0241) 
                                        (0242) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0243)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0244)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                        (0245) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0246) 
                                        (0247) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0248)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0249)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V, AGND_BYPASS_JUST
                                        (0250) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0251) 
00A8: 55 F8 00 MOV   [_ramareas_end+221],0x0(0252)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AB: 55 F9 00 MOV   [_ramareas_end+222],0x0(0253)     mov  [bSSC_KEYSP], 0
00AE: 71 10    OR    F,0x10             
                                        (0254) 
                                        (0255)     ;---------------------------------------
                                        (0256)     ; Initialize Crystal Oscillator and PLL
                                        (0257)     ;---------------------------------------
                                        (0258) 
                                        (0259) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0260)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0261)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0262)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0263)     ; the ECO to stabilize.
                                        (0264)     ;
                                        (0265)     M8C_SetBank1
                                        (0266)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0267)     M8C_SetBank0
                                        (0268)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0269)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0270)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0271) .WaitFor1s:
                                        (0272)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0273)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0274)                                           ;   since interrupts are not globally enabled
                                        (0275) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0276)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0277)     M8C_SetBank1
00B0: 62 E0 02 MOV   REG[0xE0],0x2      (0278)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B3: 70 EF    AND   F,0xEF             
00B5: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0279)     M8C_SetBank0
                                        (0280)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0281) 
                                        (0282) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0283) 
                                        (0284) IF ( PLL_MODE )
                                        (0285)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0286)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0287)     ;
                                        (0288)     M8C_SetBank1
                                        (0289)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0290)     M8C_SetBank0
                                        (0291)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0292)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0293) 
                                        (0294) .WaitFor16ms:
                                        (0295)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0296)     jz   .WaitFor16ms
                                        (0297)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0298)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0299)     M8C_SetBank0
                                        (0300) 
                                        (0301) IF      ( WAIT_FOR_32K )
                                        (0302) ELSE ; !( WAIT_FOR_32K )
                                        (0303)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0304)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0305) ENDIF ;(WAIT_FOR_32K)
                                        (0306) ENDIF ;(PLL_MODE)
                                        (0307) 
                                        (0308)     ;-------------------------------------------------------
                                        (0309)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0310)     ;-------------------------------------------------------
                                        (0311) 
                                        (0312)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0313) 
                                        (0314) IF (SYSCLK_SOURCE)
                                        (0315)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0316) ENDIF
                                        (0317)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0318) 
                                        (0319)     ;------------------------
                                        (0320)     ; Close CT leakage path.
                                        (0321)     ;------------------------
00B8: 62 71 05 MOV   REG[0x71],0x5      (0322)     mov   reg[ACB00CR0], 05h
00BB: 62 75 05 MOV   REG[0x75],0x5      (0323)     mov   reg[ACB01CR0], 05h
                                        (0324) 
                                        (0325)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0326)     ;---------------------------------------------------
                                        (0327)     ; Insert your custom code below this banner
                                        (0328)     ;---------------------------------------------------
                                        (0329) 
                                        (0330)     ;---------------------------------------------------
                                        (0331)     ; Insert your custom code above this banner
                                        (0332)     ;---------------------------------------------------
                                        (0333)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0334) 
                                        (0335)     ;-------------------------
                                        (0336)     ; Load Base Configuration
                                        (0337)     ;-------------------------
                                        (0338)     ; Load global parameter settings and load the user modules in the
                                        (0339)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0340)     ; to minimize start up time; (2) We may still need to play with the
                                        (0341)     ; Sleep Timer.
                                        (0342)     ;
00BE: 7C 02 05 LCALL 0x0205             (0343)     lcall LoadConfigInit
                                        (0344) 
                                        (0345)     ;-----------------------------------
                                        (0346)     ; Initialize C Run-Time Environment
                                        (0347)     ;-----------------------------------
                                        (0348) IF ( C_LANGUAGE_SUPPORT )
00C1: 50 00    MOV   A,0x0              (0349)     mov  A,0                           ; clear the 'bss' segment to zero
00C3: 55 12 13 MOV   [__r0],0x13        (0350)     mov  [__r0],<__bss_start
                                        (0351) BssLoop:
00C6: 3C 12 1B CMP   [__r0],0x1B        (0352)     cmp  [__r0],<__bss_end
00C9: A0 05    JZ    0x00CF             (0353)     jz   BssDone
00CB: 3F 12    MVI   [__r0],A           (0354)     mvi  [__r0],A
00CD: 8F F8    JMP   0x00C6             (0355)     jmp  BssLoop
                                        (0356) BssDone:
00CF: 50 01    MOV   A,0x1              (0357)     mov  A,>__idata_start              ; copy idata to data segment
00D1: 57 90    MOV   X,0x90             (0358)     mov  X,<__idata_start
00D3: 55 12 00 MOV   [__r0],0x0         (0359)     mov  [__r0],<__data_start
                                        (0360) IDataLoop:
00D6: 3C 12 10 CMP   [__r0],0x10        (0361)     cmp  [__r0],<__data_end
00D9: A0 0B    JZ    0x00E5             (0362)     jz   C_RTE_Done
00DB: 08       PUSH  A                  (0363)     push A
00DC: 28       ROMX                     (0364)     romx
00DD: 3F 12    MVI   [__r0],A           (0365)     mvi  [__r0],A
00DF: 18       POP   A                  (0366)     pop  A
00E0: 75       INC   X                  (0367)     inc  X
00E1: 09 00    ADC   A,0x0              (0368)     adc  A,0
00E3: 8F F2    JMP   0x00D6             (0369)     jmp  IDataLoop
00E5: 71 10    OR    F,0x10             
                                        (0370) 
                                        (0371) C_RTE_Done:
                                        (0372) 
                                        (0373) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0374) 
                                        (0375)     ;-------------------------------
                                        (0376)     ; Voltage Stabilization for SMP
                                        (0377)     ;-------------------------------
                                        (0378) 
                                        (0379) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0380) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0381)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0382)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0383)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0384)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0385)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0386)     M8C_SetBank1
                                        (0387)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0388)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0389)     M8C_SetBank0
                                        (0390)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0391)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0392) .WaitFor2ms:
                                        (0393)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0394)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0395) ENDIF ; SMP is operational
                                        (0396) ENDIF ; 5.0V Operation
                                        (0397) 
                                        (0398)     ;-------------------------------
                                        (0399)     ; Set Power-On Reset (POR) Level
                                        (0400)     ;-------------------------------
                                        (0401)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0402)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0403)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0404)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0405)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0406) 
                                        (0407)     M8C_SetBank1
                                        (0408) 
                                        (0409) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0410)                                                ;  Yes, lowest trip already set
                                        (0411) ELSE                                           ;   No, must adjust POR...
                                        (0412) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
00E7: 43 E3 10 OR    REG[0xE3],0x10     (0413)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
00EA: 70 EF    AND   F,0xEF             
                                        (0414) ELSE
                                        (0415) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0416)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0417)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0418)  ELSE                                          ;    No, fast mode
                                        (0419)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0420)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0421)   ELSE ; 24HMz                                 ;
                                        (0422)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0423)   ENDIF ; 24MHz
                                        (0424)  ENDIF ; Slow Mode
                                        (0425) ENDIF ; 5.0V Operation
                                        (0426) ENDIF ; 3.3V Operation
                                        (0427) ENDIF ; 2.7V Operation
                                        (0428) 
                                        (0429)     M8C_SetBank0
                                        (0430) 
                                        (0431)     ;----------------------------
                                        (0432)     ; Wrap up and invoke "main"
                                        (0433)     ;----------------------------
                                        (0434) 
                                        (0435)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0436)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0437)     ;
00EC: 62 E0 00 MOV   REG[0xE0],0x0      (0438)     mov  reg[INT_MSK0],0
00EF: 71 10    OR    F,0x10             
                                        (0439) 
                                        (0440)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0441)     ;
                                        (0442)     M8C_SetBank1
00F1: 62 E0 00 MOV   REG[0xE0],0x0      (0443)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00F4: 70 EF    AND   F,0xEF             
                                        (0444)     M8C_SetBank0
                                        (0445) 
                                        (0446)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0447)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0448)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0449)     ;
00F6: 62 E2 00 MOV   REG[0xE2],0x0      (0450)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0451)                                    ; have been set during the boot process.
                                        (0452) IF	(TOOLCHAIN & HITECH)
                                        (0453) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0454) ELSE
                                        (0455) IF ENABLE_LJMP_TO_MAIN
                                        (0456)     ljmp  _main                    ; goto main (no return)
                                        (0457) ELSE
00F9: 7C 02 63 LCALL __text_start|_main|_main(0458)     lcall _main                    ; call main
                                        (0459) .Exit:
00FC: 8F FF    JMP   0x00FC             (0460)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0461) ENDIF
                                        (0462) ENDIF ; TOOLCHAIN
                                        (0463) 
                                        (0464)     ;---------------------------------
                                        (0465)     ; Library Access to Global Parms
                                        (0466)     ;---------------------------------
                                        (0467)     ;
                                        (0468)  bGetPowerSetting:
                                        (0469) _bGetPowerSetting:
                                        (0470)     ; Returns value of POWER_SETTING in the A register.
                                        (0471)     ; No inputs. No Side Effects.
                                        (0472)     ;
                                        (0473) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0474)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0475) ELSE
00FE: 50 09    MOV   A,0x9              (0476)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0477) ENDIF
0100: 7F       RET                      (0478)     ret
                                        (0479) 
                                        (0480) IF	(TOOLCHAIN & HITECH)
                                        (0481) ELSE
                                        (0482)     ;---------------------------------
                                        (0483)     ; Order Critical RAM & ROM AREAs
                                        (0484)     ;---------------------------------
                                        (0485)     ;  'TOP' is all that has been defined so far...
                                        (0486) 
                                        (0487)     ;  ROM AREAs for C CONST, static & global items
                                        (0488)     ;
                                        (0489)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0490)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0491) __idata_start:
                                        (0492) 
                                        (0493)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0494) __func_lit_start:
                                        (0495) 
                                        (0496)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0497)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0498) 
                                        (0499)     ; CODE segment for general use
                                        (0500)     ;
                                        (0501)     AREA text (ROM, REL, CON)
                                        (0502) __text_start:
                                        (0503) 
                                        (0504)     ; RAM area usage
                                        (0505)     ;
                                        (0506)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0507) __data_start:
                                        (0508) 
                                        (0509)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0510)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0511)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0512) __bss_start:
                                        (0513) 
                                        (0514) ENDIF ; TOOLCHAIN
                                        (0515) 
                                        (0516) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01A0: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_focuser_Bank1
                                        (0019) export LoadConfigTBL_focuser_Bank0
                                        (0020) export LoadConfigTBL_focuser_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_focuser_Bank0:
                                        (0023) ;  Global Register values Bank 0
                                        (0024) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0025) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0026) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0027) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0028) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0029) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0030) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0031) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0032) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0033) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0034) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0035) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0036) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0037) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0038) 	db		ffh
                                        (0039) LoadConfigTBL_focuser_Bank1:
                                        (0040) ;  Global Register values Bank 1
                                        (0041) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0042) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0043) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0044) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0045) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0046) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0047) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0048) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0049) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0050) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0051) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0052) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0053) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0054) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0055) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0056) 	db		deh, 03h		; OscillatorControl_4 register (OSC_CR4)
                                        (0057) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0058) 	db		ffh
                                        (0059) AREA psoc_config(rom, rel)
                                        (0060) LoadConfigTBL_focuser_Ordered:
                                        (0061) ;  Ordered Global Register values
                                        (0062) 	M8C_SetBank0
01A2: 62 00 00 MOV   REG[0x0],0x0       (0063) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01A5: 71 10    OR    F,0x10             
                                        (0064) 	M8C_SetBank1
01A7: 62 00 3C MOV   REG[0x0],0x3C      (0065) 	mov	reg[00h], 3ch		; Port_0_DriveMode_0 register (PRT0DM0)
01AA: 62 01 00 MOV   REG[0x1],0x0       (0066) 	mov	reg[01h], 00h		; Port_0_DriveMode_1 register (PRT0DM1)
01AD: 70 EF    AND   F,0xEF             
                                        (0067) 	M8C_SetBank0
01AF: 62 03 00 MOV   REG[0x3],0x0       (0068) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
01B2: 62 02 00 MOV   REG[0x2],0x0       (0069) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01B5: 71 10    OR    F,0x10             
                                        (0070) 	M8C_SetBank1
01B7: 62 02 00 MOV   REG[0x2],0x0       (0071) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01BA: 62 03 00 MOV   REG[0x3],0x0       (0072) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01BD: 70 EF    AND   F,0xEF             
                                        (0073) 	M8C_SetBank0
01BF: 62 01 00 MOV   REG[0x1],0x0       (0074) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01C2: 62 04 00 MOV   REG[0x4],0x0       (0075) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01C5: 71 10    OR    F,0x10             
                                        (0076) 	M8C_SetBank1
01C7: 62 04 00 MOV   REG[0x4],0x0       (0077) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01CA: 62 05 00 MOV   REG[0x5],0x0       (0078) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
01CD: 70 EF    AND   F,0xEF             
                                        (0079) 	M8C_SetBank0
01CF: 62 07 00 MOV   REG[0x7],0x0       (0080) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
01D2: 62 06 00 MOV   REG[0x6],0x0       (0081) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01D5: 71 10    OR    F,0x10             
                                        (0082) 	M8C_SetBank1
01D7: 62 06 00 MOV   REG[0x6],0x0       (0083) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01DA: 62 07 00 MOV   REG[0x7],0x0       (0084) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01DD: 70 EF    AND   F,0xEF             
                                        (0085) 	M8C_SetBank0
01DF: 62 05 00 MOV   REG[0x5],0x0       (0086) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01E2: 62 08 00 MOV   REG[0x8],0x0       (0087) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01E5: 71 10    OR    F,0x10             
                                        (0088) 	M8C_SetBank1
01E7: 62 08 00 MOV   REG[0x8],0x0       (0089) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
01EA: 62 09 00 MOV   REG[0x9],0x0       (0090) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
01ED: 70 EF    AND   F,0xEF             
                                        (0091) 	M8C_SetBank0
01EF: 62 0B 00 MOV   REG[0xB],0x0       (0092) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
01F2: 62 0A 00 MOV   REG[0xA],0x0       (0093) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01F5: 71 10    OR    F,0x10             
                                        (0094) 	M8C_SetBank1
01F7: 62 0A 00 MOV   REG[0xA],0x0       (0095) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
01FA: 62 0B 00 MOV   REG[0xB],0x0       (0096) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
01FD: 70 EF    AND   F,0xEF             
                                        (0097) 	M8C_SetBank0
01FF: 62 09 00 MOV   REG[0x9],0x0       (0098) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0202: 70 EF    AND   F,0xEF             
                                        (0099) 	M8C_SetBank0
0204: 7F       RET                      (0100) 	ret
                                        (0101) 
                                        (0102) 
                                        (0103) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_focuser
                                        (0026) export _LoadConfig_focuser
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0205: 7C 02 0C LCALL 0x020C             (0058) 	lcall	LoadConfig_focuser
0208: 7C 01 A0 LCALL 0x01A0             (0059) 	lcall	LoadConfigTBL_focuser_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
020B: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration focuser
                                        (0067) ;
                                        (0068) ;    Load configuration registers for focuser.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_focuser:
                                        (0085)  LoadConfig_focuser:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
020C: 10       PUSH  X                  (0088) 	push	x
020D: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
020F: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0211: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0212: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_focuser_Bank0
0214: 57 50    MOV   X,0x50             (0094)     mov     X, <LoadConfigTBL_focuser_Bank0
0216: 7C 02 27 LCALL 0x0227             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0219: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
021B: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
021C: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_focuser_Bank1
021E: 57 6D    MOV   X,0x6D             (0101)     mov     X, <LoadConfigTBL_focuser_Bank1
0220: 7C 02 27 LCALL 0x0227             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0223: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0225: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0226: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0227: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0229: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
022A: 08       PUSH  A                  (0132)     push    A
022B: 4F       MOV   X,SP               (0133)     mov     X, SP
022C: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
022F: D0 04    JNC   0x0234             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0231: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0234: 18       POP   A                  (0138)     pop     A
0235: 20       POP   X                  (0139)     pop     X
0236: 70 EF    AND   F,0xEF             
0238: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
023B: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
023C: 08       PUSH  A                  (0145)     push    A
023D: 28       ROMX                     (0146)     romx                            ; Load register address from table
023E: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0240: A0 1F    JZ    0x0260             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0242: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0243: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0246: A0 03    JZ    0x024A             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0248: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
024A: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
024C: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
024D: 20       POP   X                  (0156)     pop     X
024E: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
024F: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0251: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0252: 08       PUSH  A                  (0160)     push    A
0253: 28       ROMX                     (0161)     romx                            ; load config data from the table
0254: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0255: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0257: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0259: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
025A: 20       POP   X                  (0166)     pop     X
025B: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
025C: 09 00    ADC   A,0x0              (0168)     adc     A, 0
025E: 8F D7    JMP   0x0236             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0260: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0262: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: C:\Users\ADMINI~1\DOCUME~1\PSOCDE~1.4PR\DPMACC~1\Focuser\Focuser\Focuser\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) void SetOutput(void);
(0009) void Step(void);
(0010) 
(0011) int pos;
(0012) int enable;
(0013) int delay;
(0014) int lstep;
(0015) 
(0016) void main(void)
(0017) {
__text_start|_main|_main:
  g                    --> X+4
  f                    --> X+2
  bstep                --> X+0
    0263: 10       PUSH  X
    0264: 4F       MOV   X,SP
    0265: 38 06    ADD   SP,0x6
(0018) 	int bstep;
(0019) 	int f, g;
(0020) 	//M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
(0021) 	//M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0022) 	// Insert your main routine code here.
(0023) 	pos = 0;
    0267: 55 1A 00 MOV   [pos+1],0x0
    026A: 55 19 00 MOV   [pos],0x0
(0024) 	enable = 0;
    026D: 55 18 00 MOV   [enable+1],0x0
    0270: 55 17 00 MOV   [enable],0x0
(0025) 	delay = 0;
    0273: 55 16 00 MOV   [delay+1],0x0
    0276: 55 15 00 MOV   [delay],0x0
(0026) 	SetOutput();
    0279: 90 B2    CALL  _SetOutput
(0027) 	loop:
(0028) 	bstep = PRT1DR & 1;
    027B: 5D 04    MOV   A,REG[0x4]
    027D: 21 01    AND   A,0x1
    027F: 54 01    MOV   [X+1],A
    0281: 56 00 00 MOV   [X+0],0x0
(0029) 	if(lstep == 0 && bstep == 1) {
    0284: 3C 13 00 CMP   [lstep],0x0
    0287: B0 12    JNZ   0x029A
    0289: 3C 14 00 CMP   [lstep+1],0x0
    028C: B0 0D    JNZ   0x029A
    028E: 3D 00 00 CMP   [X+0],0x0
    0291: B0 08    JNZ   0x029A
    0293: 3D 01 01 CMP   [X+1],0x1
    0296: B0 03    JNZ   0x029A
(0030) 		Step();
    0298: 90 36    CALL  _Step
(0031) 	}
(0032) 	lstep = bstep;
    029A: 52 01    MOV   A,[X+1]
    029C: 53 14    MOV   [lstep+1],A
    029E: 52 00    MOV   A,[X+0]
    02A0: 53 13    MOV   [lstep],A
(0033) 	if(delay > 0) {
    02A2: 50 00    MOV   A,0x0
    02A4: 12 16    SUB   A,[delay+1]
    02A6: 51 15    MOV   A,[delay]
    02A8: 31 80    XOR   A,0x80
    02AA: 53 10    MOV   [__rX],A
    02AC: 50 80    MOV   A,0x80
    02AE: 1A 10    SBB   A,[__rX]
    02B0: DF CA    JNC   0x027B
(0034) 		delay--;
    02B2: 7A 16    DEC   [delay+1]
    02B4: 1E 15 00 SBB   [delay],0x0
(0035) 		if (delay == 0) {
    02B7: 3C 15 00 CMP   [delay],0x0
    02BA: BF C0    JNZ   0x027B
    02BC: 3C 16 00 CMP   [delay+1],0x0
    02BF: BF BB    JNZ   0x027B
(0036) 			enable = 0;
    02C1: 55 18 00 MOV   [enable+1],0x0
    02C4: 55 17 00 MOV   [enable],0x0
(0037) 			SetOutput();
    02C7: 90 64    CALL  _SetOutput
(0038) 		}
(0039) 	}
(0040) 	goto loop;
    02C9: 8F B1    JMP   0x027B
    02CB: 38 FA    ADD   SP,0xFA
    02CD: 20       POP   X
    02CE: 8F FF    JMP   0x02CE
(0041) }
(0042) 
(0043) void Step(void) {
_Step:
  dir                  --> X+0
    02D0: 10       PUSH  X
    02D1: 4F       MOV   X,SP
    02D2: 38 02    ADD   SP,0x2
(0044) 	int dir = PRT1DR & 2;
    02D4: 5D 04    MOV   A,REG[0x4]
    02D6: 21 02    AND   A,0x2
    02D8: 54 01    MOV   [X+1],A
    02DA: 56 00 00 MOV   [X+0],0x0
(0045) 	if(!dir) {
    02DD: 3D 00 00 CMP   [X+0],0x0
    02E0: B0 23    JNZ   0x0304
    02E2: 3D 01 00 CMP   [X+1],0x0
    02E5: B0 1E    JNZ   0x0304
(0046) 		pos++;
    02E7: 76 1A    INC   [pos+1]
    02E9: 0E 19 00 ADC   [pos],0x0
(0047) 		if (pos > 7) pos = 0;
    02EC: 50 07    MOV   A,0x7
    02EE: 12 1A    SUB   A,[pos+1]
    02F0: 51 19    MOV   A,[pos]
    02F2: 31 80    XOR   A,0x80
    02F4: 53 10    MOV   [__rX],A
    02F6: 50 80    MOV   A,0x80
    02F8: 1A 10    SBB   A,[__rX]
    02FA: D0 20    JNC   0x031B
    02FC: 55 1A 00 MOV   [pos+1],0x0
    02FF: 55 19 00 MOV   [pos],0x0
(0048) 	} else {
    0302: 80 18    JMP   0x031B
(0049) 		pos--;
    0304: 7A 1A    DEC   [pos+1]
    0306: 1E 19 00 SBB   [pos],0x0
(0050) 		if (pos < 0) pos = 7;
    0309: 51 1A    MOV   A,[pos+1]
    030B: 11 00    SUB   A,0x0
    030D: 51 19    MOV   A,[pos]
    030F: 31 80    XOR   A,0x80
    0311: 19 80    SBB   A,0x80
    0313: D0 07    JNC   0x031B
    0315: 55 1A 07 MOV   [pos+1],0x7
    0318: 55 19 00 MOV   [pos],0x0
(0051) 	}
(0052) 	enable = 1;
    031B: 55 18 01 MOV   [enable+1],0x1
    031E: 55 17 00 MOV   [enable],0x0
(0053) 	delay = 32000;
    0321: 55 16 00 MOV   [delay+1],0x0
    0324: 55 15 7D MOV   [delay],0x7D
(0054) 	SetOutput();
    0327: 90 04    CALL  _SetOutput
    0329: 38 FE    ADD   SP,0xFE
    032B: 20       POP   X
    032C: 7F       RET   
(0055) }
(0056) 
(0057) int stepdata[] = {
(0058) 	0x0a,
(0059) 	0x08,
(0060) 	0x09,
(0061) 	0x01,
(0062) 	0x05,
(0063) 	0x04,
(0064) 	0x06,
(0065) 	0x02
(0066) };
(0067) 
(0068) void SetOutput(void) {
_SetOutput:
  value                --> X+0
    032D: 10       PUSH  X
    032E: 4F       MOV   X,SP
    032F: 38 02    ADD   SP,0x2
(0069) 	int value = 0;
    0331: 56 01 00 MOV   [X+1],0x0
    0334: 56 00 00 MOV   [X+0],0x0
(0070) 	if (enable) {
    0337: 3C 17 00 CMP   [enable],0x0
    033A: B0 06    JNZ   0x0341
    033C: 3C 18 00 CMP   [enable+1],0x0
    033F: A0 11    JZ    0x0351
(0071) 		value = stepdata[pos];
    0341: 5F 11 1A MOV   [__r1],[pos+1]
    0344: 65 11    ASL   [__r1]
    0346: 06 11 00 ADD   [__r1],0x0
    0349: 3E 11    MVI   A,[__r1]
    034B: 54 00    MOV   [X+0],A
    034D: 3E 11    MVI   A,[__r1]
    034F: 54 01    MOV   [X+1],A
(0072) 	}
(0073) 	PRT0DR = value<<2;
    0351: 52 01    MOV   A,[X+1]
    0353: 64       ASL   A
    0354: 64       ASL   A
    0355: 60 00    MOV   REG[0x0],A
    0357: 38 FE    ADD   SP,0xFE
    0359: 20       POP   X
    035A: 7F       RET   
